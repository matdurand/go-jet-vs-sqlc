//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Customer = newCustomerTable("public", "customer", "")

type customerTable struct {
	postgres.Table

	// Columns
	CustomerID   postgres.ColumnInteger
	FirstName    postgres.ColumnString
	LastName     postgres.ColumnString
	Company      postgres.ColumnString
	Address      postgres.ColumnString
	City         postgres.ColumnString
	State        postgres.ColumnString
	Country      postgres.ColumnString
	PostalCode   postgres.ColumnString
	Phone        postgres.ColumnString
	Fax          postgres.ColumnString
	Email        postgres.ColumnString
	SupportRepID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CustomerTable struct {
	customerTable

	EXCLUDED customerTable
}

// AS creates new CustomerTable with assigned alias
func (a CustomerTable) AS(alias string) *CustomerTable {
	return newCustomerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CustomerTable with assigned schema name
func (a CustomerTable) FromSchema(schemaName string) *CustomerTable {
	return newCustomerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CustomerTable with assigned table prefix
func (a CustomerTable) WithPrefix(prefix string) *CustomerTable {
	return newCustomerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CustomerTable with assigned table suffix
func (a CustomerTable) WithSuffix(suffix string) *CustomerTable {
	return newCustomerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCustomerTable(schemaName, tableName, alias string) *CustomerTable {
	return &CustomerTable{
		customerTable: newCustomerTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCustomerTableImpl("", "excluded", ""),
	}
}

func newCustomerTableImpl(schemaName, tableName, alias string) customerTable {
	var (
		CustomerIDColumn   = postgres.IntegerColumn("customer_id")
		FirstNameColumn    = postgres.StringColumn("first_name")
		LastNameColumn     = postgres.StringColumn("last_name")
		CompanyColumn      = postgres.StringColumn("company")
		AddressColumn      = postgres.StringColumn("address")
		CityColumn         = postgres.StringColumn("city")
		StateColumn        = postgres.StringColumn("state")
		CountryColumn      = postgres.StringColumn("country")
		PostalCodeColumn   = postgres.StringColumn("postal_code")
		PhoneColumn        = postgres.StringColumn("phone")
		FaxColumn          = postgres.StringColumn("fax")
		EmailColumn        = postgres.StringColumn("email")
		SupportRepIDColumn = postgres.IntegerColumn("support_rep_id")
		allColumns         = postgres.ColumnList{CustomerIDColumn, FirstNameColumn, LastNameColumn, CompanyColumn, AddressColumn, CityColumn, StateColumn, CountryColumn, PostalCodeColumn, PhoneColumn, FaxColumn, EmailColumn, SupportRepIDColumn}
		mutableColumns     = postgres.ColumnList{FirstNameColumn, LastNameColumn, CompanyColumn, AddressColumn, CityColumn, StateColumn, CountryColumn, PostalCodeColumn, PhoneColumn, FaxColumn, EmailColumn, SupportRepIDColumn}
	)

	return customerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CustomerID:   CustomerIDColumn,
		FirstName:    FirstNameColumn,
		LastName:     LastNameColumn,
		Company:      CompanyColumn,
		Address:      AddressColumn,
		City:         CityColumn,
		State:        StateColumn,
		Country:      CountryColumn,
		PostalCode:   PostalCodeColumn,
		Phone:        PhoneColumn,
		Fax:          FaxColumn,
		Email:        EmailColumn,
		SupportRepID: SupportRepIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
