//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Invoice = newInvoiceTable("public", "invoice", "")

type invoiceTable struct {
	postgres.Table

	// Columns
	InvoiceID         postgres.ColumnInteger
	CustomerID        postgres.ColumnInteger
	InvoiceDate       postgres.ColumnTimestamp
	BillingAddress    postgres.ColumnString
	BillingCity       postgres.ColumnString
	BillingState      postgres.ColumnString
	BillingCountry    postgres.ColumnString
	BillingPostalCode postgres.ColumnString
	Total             postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InvoiceTable struct {
	invoiceTable

	EXCLUDED invoiceTable
}

// AS creates new InvoiceTable with assigned alias
func (a InvoiceTable) AS(alias string) *InvoiceTable {
	return newInvoiceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InvoiceTable with assigned schema name
func (a InvoiceTable) FromSchema(schemaName string) *InvoiceTable {
	return newInvoiceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InvoiceTable with assigned table prefix
func (a InvoiceTable) WithPrefix(prefix string) *InvoiceTable {
	return newInvoiceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InvoiceTable with assigned table suffix
func (a InvoiceTable) WithSuffix(suffix string) *InvoiceTable {
	return newInvoiceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInvoiceTable(schemaName, tableName, alias string) *InvoiceTable {
	return &InvoiceTable{
		invoiceTable: newInvoiceTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newInvoiceTableImpl("", "excluded", ""),
	}
}

func newInvoiceTableImpl(schemaName, tableName, alias string) invoiceTable {
	var (
		InvoiceIDColumn         = postgres.IntegerColumn("invoice_id")
		CustomerIDColumn        = postgres.IntegerColumn("customer_id")
		InvoiceDateColumn       = postgres.TimestampColumn("invoice_date")
		BillingAddressColumn    = postgres.StringColumn("billing_address")
		BillingCityColumn       = postgres.StringColumn("billing_city")
		BillingStateColumn      = postgres.StringColumn("billing_state")
		BillingCountryColumn    = postgres.StringColumn("billing_country")
		BillingPostalCodeColumn = postgres.StringColumn("billing_postal_code")
		TotalColumn             = postgres.FloatColumn("total")
		allColumns              = postgres.ColumnList{InvoiceIDColumn, CustomerIDColumn, InvoiceDateColumn, BillingAddressColumn, BillingCityColumn, BillingStateColumn, BillingCountryColumn, BillingPostalCodeColumn, TotalColumn}
		mutableColumns          = postgres.ColumnList{CustomerIDColumn, InvoiceDateColumn, BillingAddressColumn, BillingCityColumn, BillingStateColumn, BillingCountryColumn, BillingPostalCodeColumn, TotalColumn}
	)

	return invoiceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		InvoiceID:         InvoiceIDColumn,
		CustomerID:        CustomerIDColumn,
		InvoiceDate:       InvoiceDateColumn,
		BillingAddress:    BillingAddressColumn,
		BillingCity:       BillingCityColumn,
		BillingState:      BillingStateColumn,
		BillingCountry:    BillingCountryColumn,
		BillingPostalCode: BillingPostalCodeColumn,
		Total:             TotalColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
