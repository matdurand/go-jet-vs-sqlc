//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Artist = newArtistTable("public", "artist", "")

type artistTable struct {
	postgres.Table

	// Columns
	ArtistID postgres.ColumnInteger
	Name     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ArtistTable struct {
	artistTable

	EXCLUDED artistTable
}

// AS creates new ArtistTable with assigned alias
func (a ArtistTable) AS(alias string) *ArtistTable {
	return newArtistTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArtistTable with assigned schema name
func (a ArtistTable) FromSchema(schemaName string) *ArtistTable {
	return newArtistTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArtistTable with assigned table prefix
func (a ArtistTable) WithPrefix(prefix string) *ArtistTable {
	return newArtistTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArtistTable with assigned table suffix
func (a ArtistTable) WithSuffix(suffix string) *ArtistTable {
	return newArtistTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArtistTable(schemaName, tableName, alias string) *ArtistTable {
	return &ArtistTable{
		artistTable: newArtistTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newArtistTableImpl("", "excluded", ""),
	}
}

func newArtistTableImpl(schemaName, tableName, alias string) artistTable {
	var (
		ArtistIDColumn = postgres.IntegerColumn("artist_id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{ArtistIDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{NameColumn}
	)

	return artistTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ArtistID: ArtistIDColumn,
		Name:     NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
