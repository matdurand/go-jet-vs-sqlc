//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var InvoiceLine = newInvoiceLineTable("public", "invoice_line", "")

type invoiceLineTable struct {
	postgres.Table

	// Columns
	InvoiceLineID postgres.ColumnInteger
	InvoiceID     postgres.ColumnInteger
	TrackID       postgres.ColumnInteger
	UnitPrice     postgres.ColumnFloat
	Quantity      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InvoiceLineTable struct {
	invoiceLineTable

	EXCLUDED invoiceLineTable
}

// AS creates new InvoiceLineTable with assigned alias
func (a InvoiceLineTable) AS(alias string) *InvoiceLineTable {
	return newInvoiceLineTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InvoiceLineTable with assigned schema name
func (a InvoiceLineTable) FromSchema(schemaName string) *InvoiceLineTable {
	return newInvoiceLineTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InvoiceLineTable with assigned table prefix
func (a InvoiceLineTable) WithPrefix(prefix string) *InvoiceLineTable {
	return newInvoiceLineTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InvoiceLineTable with assigned table suffix
func (a InvoiceLineTable) WithSuffix(suffix string) *InvoiceLineTable {
	return newInvoiceLineTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInvoiceLineTable(schemaName, tableName, alias string) *InvoiceLineTable {
	return &InvoiceLineTable{
		invoiceLineTable: newInvoiceLineTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newInvoiceLineTableImpl("", "excluded", ""),
	}
}

func newInvoiceLineTableImpl(schemaName, tableName, alias string) invoiceLineTable {
	var (
		InvoiceLineIDColumn = postgres.IntegerColumn("invoice_line_id")
		InvoiceIDColumn     = postgres.IntegerColumn("invoice_id")
		TrackIDColumn       = postgres.IntegerColumn("track_id")
		UnitPriceColumn     = postgres.FloatColumn("unit_price")
		QuantityColumn      = postgres.IntegerColumn("quantity")
		allColumns          = postgres.ColumnList{InvoiceLineIDColumn, InvoiceIDColumn, TrackIDColumn, UnitPriceColumn, QuantityColumn}
		mutableColumns      = postgres.ColumnList{InvoiceIDColumn, TrackIDColumn, UnitPriceColumn, QuantityColumn}
	)

	return invoiceLineTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		InvoiceLineID: InvoiceLineIDColumn,
		InvoiceID:     InvoiceIDColumn,
		TrackID:       TrackIDColumn,
		UnitPrice:     UnitPriceColumn,
		Quantity:      QuantityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
