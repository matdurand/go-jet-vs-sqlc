//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Employee = newEmployeeTable("public", "employee", "")

type employeeTable struct {
	postgres.Table

	// Columns
	EmployeeID postgres.ColumnInteger
	LastName   postgres.ColumnString
	FirstName  postgres.ColumnString
	Title      postgres.ColumnString
	ReportsTo  postgres.ColumnInteger
	BirthDate  postgres.ColumnTimestamp
	HireDate   postgres.ColumnTimestamp
	Address    postgres.ColumnString
	City       postgres.ColumnString
	State      postgres.ColumnString
	Country    postgres.ColumnString
	PostalCode postgres.ColumnString
	Phone      postgres.ColumnString
	Fax        postgres.ColumnString
	Email      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmployeeTable struct {
	employeeTable

	EXCLUDED employeeTable
}

// AS creates new EmployeeTable with assigned alias
func (a EmployeeTable) AS(alias string) *EmployeeTable {
	return newEmployeeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmployeeTable with assigned schema name
func (a EmployeeTable) FromSchema(schemaName string) *EmployeeTable {
	return newEmployeeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmployeeTable with assigned table prefix
func (a EmployeeTable) WithPrefix(prefix string) *EmployeeTable {
	return newEmployeeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmployeeTable with assigned table suffix
func (a EmployeeTable) WithSuffix(suffix string) *EmployeeTable {
	return newEmployeeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmployeeTable(schemaName, tableName, alias string) *EmployeeTable {
	return &EmployeeTable{
		employeeTable: newEmployeeTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newEmployeeTableImpl("", "excluded", ""),
	}
}

func newEmployeeTableImpl(schemaName, tableName, alias string) employeeTable {
	var (
		EmployeeIDColumn = postgres.IntegerColumn("employee_id")
		LastNameColumn   = postgres.StringColumn("last_name")
		FirstNameColumn  = postgres.StringColumn("first_name")
		TitleColumn      = postgres.StringColumn("title")
		ReportsToColumn  = postgres.IntegerColumn("reports_to")
		BirthDateColumn  = postgres.TimestampColumn("birth_date")
		HireDateColumn   = postgres.TimestampColumn("hire_date")
		AddressColumn    = postgres.StringColumn("address")
		CityColumn       = postgres.StringColumn("city")
		StateColumn      = postgres.StringColumn("state")
		CountryColumn    = postgres.StringColumn("country")
		PostalCodeColumn = postgres.StringColumn("postal_code")
		PhoneColumn      = postgres.StringColumn("phone")
		FaxColumn        = postgres.StringColumn("fax")
		EmailColumn      = postgres.StringColumn("email")
		allColumns       = postgres.ColumnList{EmployeeIDColumn, LastNameColumn, FirstNameColumn, TitleColumn, ReportsToColumn, BirthDateColumn, HireDateColumn, AddressColumn, CityColumn, StateColumn, CountryColumn, PostalCodeColumn, PhoneColumn, FaxColumn, EmailColumn}
		mutableColumns   = postgres.ColumnList{LastNameColumn, FirstNameColumn, TitleColumn, ReportsToColumn, BirthDateColumn, HireDateColumn, AddressColumn, CityColumn, StateColumn, CountryColumn, PostalCodeColumn, PhoneColumn, FaxColumn, EmailColumn}
	)

	return employeeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EmployeeID: EmployeeIDColumn,
		LastName:   LastNameColumn,
		FirstName:  FirstNameColumn,
		Title:      TitleColumn,
		ReportsTo:  ReportsToColumn,
		BirthDate:  BirthDateColumn,
		HireDate:   HireDateColumn,
		Address:    AddressColumn,
		City:       CityColumn,
		State:      StateColumn,
		Country:    CountryColumn,
		PostalCode: PostalCodeColumn,
		Phone:      PhoneColumn,
		Fax:        FaxColumn,
		Email:      EmailColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
