//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Track = newTrackTable("public", "track", "")

type trackTable struct {
	postgres.Table

	// Columns
	TrackID      postgres.ColumnInteger
	Name         postgres.ColumnString
	AlbumID      postgres.ColumnInteger
	MediaTypeID  postgres.ColumnInteger
	GenreID      postgres.ColumnInteger
	Composer     postgres.ColumnString
	Milliseconds postgres.ColumnInteger
	Bytes        postgres.ColumnInteger
	UnitPrice    postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TrackTable struct {
	trackTable

	EXCLUDED trackTable
}

// AS creates new TrackTable with assigned alias
func (a TrackTable) AS(alias string) *TrackTable {
	return newTrackTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TrackTable with assigned schema name
func (a TrackTable) FromSchema(schemaName string) *TrackTable {
	return newTrackTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TrackTable with assigned table prefix
func (a TrackTable) WithPrefix(prefix string) *TrackTable {
	return newTrackTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TrackTable with assigned table suffix
func (a TrackTable) WithSuffix(suffix string) *TrackTable {
	return newTrackTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTrackTable(schemaName, tableName, alias string) *TrackTable {
	return &TrackTable{
		trackTable: newTrackTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newTrackTableImpl("", "excluded", ""),
	}
}

func newTrackTableImpl(schemaName, tableName, alias string) trackTable {
	var (
		TrackIDColumn      = postgres.IntegerColumn("track_id")
		NameColumn         = postgres.StringColumn("name")
		AlbumIDColumn      = postgres.IntegerColumn("album_id")
		MediaTypeIDColumn  = postgres.IntegerColumn("media_type_id")
		GenreIDColumn      = postgres.IntegerColumn("genre_id")
		ComposerColumn     = postgres.StringColumn("composer")
		MillisecondsColumn = postgres.IntegerColumn("milliseconds")
		BytesColumn        = postgres.IntegerColumn("bytes")
		UnitPriceColumn    = postgres.FloatColumn("unit_price")
		allColumns         = postgres.ColumnList{TrackIDColumn, NameColumn, AlbumIDColumn, MediaTypeIDColumn, GenreIDColumn, ComposerColumn, MillisecondsColumn, BytesColumn, UnitPriceColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, AlbumIDColumn, MediaTypeIDColumn, GenreIDColumn, ComposerColumn, MillisecondsColumn, BytesColumn, UnitPriceColumn}
	)

	return trackTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TrackID:      TrackIDColumn,
		Name:         NameColumn,
		AlbumID:      AlbumIDColumn,
		MediaTypeID:  MediaTypeIDColumn,
		GenreID:      GenreIDColumn,
		Composer:     ComposerColumn,
		Milliseconds: MillisecondsColumn,
		Bytes:        BytesColumn,
		UnitPrice:    UnitPriceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
