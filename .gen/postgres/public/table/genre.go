//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Genre = newGenreTable("public", "genre", "")

type genreTable struct {
	postgres.Table

	// Columns
	GenreID postgres.ColumnInteger
	Name    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GenreTable struct {
	genreTable

	EXCLUDED genreTable
}

// AS creates new GenreTable with assigned alias
func (a GenreTable) AS(alias string) *GenreTable {
	return newGenreTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GenreTable with assigned schema name
func (a GenreTable) FromSchema(schemaName string) *GenreTable {
	return newGenreTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GenreTable with assigned table prefix
func (a GenreTable) WithPrefix(prefix string) *GenreTable {
	return newGenreTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GenreTable with assigned table suffix
func (a GenreTable) WithSuffix(suffix string) *GenreTable {
	return newGenreTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGenreTable(schemaName, tableName, alias string) *GenreTable {
	return &GenreTable{
		genreTable: newGenreTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newGenreTableImpl("", "excluded", ""),
	}
}

func newGenreTableImpl(schemaName, tableName, alias string) genreTable {
	var (
		GenreIDColumn  = postgres.IntegerColumn("genre_id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{GenreIDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{NameColumn}
	)

	return genreTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GenreID: GenreIDColumn,
		Name:    NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
